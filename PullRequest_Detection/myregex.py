# -*- coding: utf-8 -*-
"""myregex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Ijx1ns6NXKp4HiatjI2akE6PM7MMiOO
"""

# -*- coding: utf-8 -*-
"""regex_utils.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zhRS4s7iy5zDF7qdpHNTfcUE4vHBnk-T
"""


import re
def find_only_multiline_comment(text:str):
  
  """The following function takes string as an argument 
  and returns multiline comments"""

  first_step =  [i for i in re.findall(r'^[+]{1}[^+][\s\t][*]+[^//].*',str(text), flags=re.MULTILINE)]
  next_step = [re.sub("[+\t*\n+\t*.,]","",i).strip() for i in first_step]
  final =  " ".join(next_step)
  return final

def find_only_added_comments(text:str):
  
  """The following function takes string as an argument
   and returns comments comments"""
  
  first_step = [re.sub("[+//\t+.,]+", "",i).strip() for i in re.findall(r'^[+]{1}.+//.+',str(text), flags=re.MULTILINE)]
  final = " ".join(first_step)
  return final

def find_only_removed_comments(text:str):
  
  """The following function takes string as an argument 
  and  returns removed comments"""
  
  first_step = [re.sub("[-//\t.,]+", "",i).strip() for i in re.findall(r'^[-]{1}[^-].+//.+',str(text), flags=re.MULTILINE)]
  final = " ".join(first_step)
  return final


def find_only_added_code(text:str):
  
  """The following function takes string as an argument and 
  returns added code"""
  
  first_step =  [re.sub("[//].+","",i).strip() for i in re.findall(r'^[+]{1}[^+][\s\t]+[^//].+',str(text), flags=re.MULTILINE)]
  next_step = " ".join([re.sub("[\t,\s,+]","",i).strip() for i in first_step]).strip()
  return next_step

def find_only_removed_code(text:str):
  
  """The following function takes string as an argument and 
  returns removed code"""
  
  first_step =  [re.sub("[//].+","",i).strip() for i in re.findall(r'^[-]{1}[^-][\s\t]+[^//].+',str(text), flags=re.MULTILINE)]
  next_step = " ".join([re.sub("[\t,\s,-]","",i).strip() for i in first_step]).strip()
  return next_step

